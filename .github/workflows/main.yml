name: CI/CD - Node.js Docker Deploy

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}    # e.g., youruser/nodejs-demo-app
  TAG: ${{ github.sha }}                   # commit SHA as tag

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  build-and-push:
    name: Build & Push Docker image
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ env.TAG }}

optional-deploy:
  name: Deploy to server (optional)
  needs: build-and-push
  runs-on: ubuntu-latest
  if: ${{ secrets.SSH_HOST != '' && secrets.SSH_PRIVATE_KEY != '' }}
  steps:
    - name: Install SSH client
      run: sudo apt-get update && sudo apt-get install -y openssh-client

    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.8.1
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy: Pull image and restart container
      run: 
        # Define variables
        IMAGE="${{ env.IMAGE_NAME }}:${{ env.TAG }}"
        IMAGE_LATEST="${{ env.IMAGE_NAME }}:latest"
        SSH_PORT="${{ secrets.SSH_PORT }}"
        SSH_PORT="${SSH_PORT:-22}"

        # Connect to server and deploy
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -p $SSH_PORT << 'EOF'
          docker pull $IMAGE || docker pull $IMAGE_LATEST
          docker stop nodejs_demo_app || true
          docker rm nodejs_demo_app || true
          docker run -d --restart unless-stopped --name nodejs_demo_app -p 3000:3000 $IMAGE || docker run -d --restart unless-stopped --name nodejs_demo_app -p 3000:3000 $IMAGE_LATEST
          docker image prune -f
          exit
        EOF
