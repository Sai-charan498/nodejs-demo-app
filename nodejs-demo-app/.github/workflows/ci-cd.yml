name: Node.js CI/CD Pipeline with Docker Hub

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  IMAGE_NAME: nodejs-demo-app
  DOCKER_HUB_REPO: ${{ secrets.DOCKER_HUB_USERNAME }}/nodejs-demo-app

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      working-directory: ./nodejs-demo-app
      
    - name: Run linter
      run: npm run lint
      working-directory: ./nodejs-demo-app
      
    - name: Run tests
      run: npm test
      working-directory: ./nodejs-demo-app
      
    - name: Build application
      run: npm run build
      working-directory: ./nodejs-demo-app

  build-and-push:
    name: Build & Push to Docker Hub
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.D }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_HUB_REPO }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Node.js Demo App
          org.opencontainers.image.description=A simple Node.js Express application with CI/CD
          org.opencontainers.image.vendor=Sai Charan
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./nodejs-demo-app
        file: ./nodejs-demo-app/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.DOCKER_HUB_REPO }}:latest
        format: spdx-json
        output-file: sbom.spdx.json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.spdx.json

  security-scan:
    name: Security Scan
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_HUB_REPO }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy Application
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.D }}
        
    - name: Test Docker Hub image
      run: |
        echo "üß™ Testing Docker Hub image..."
        docker pull ${{ env.DOCKER_HUB_REPO }}:latest
        docker run -d -p 3000:3000 --name test-container ${{ env.DOCKER_HUB_REPO }}:latest
        sleep 15
        
        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f http://localhost:3000/health || exit 1
        
        # Test main endpoint
        echo "Testing main endpoint..."
        curl -f http://localhost:3000/ || exit 1
        
        # Test API endpoint
        echo "Testing API endpoint..."
        curl -f http://localhost:3000/api/users || exit 1
        
        docker stop test-container
        docker rm test-container
        echo "‚úÖ All deployment tests passed!"
        
    - name: Deployment Summary
      run: |
        echo "üöÄ Deployment completed successfully!"
        echo "üì¶ Docker Hub Image: ${{ env.DOCKER_HUB_REPO }}:latest"
        echo "üîó Pull command: docker pull ${{ env.DOCKER_HUB_REPO }}:latest"
        echo "üèÉ Run command: docker run -p 3000:3000 ${{ env.DOCKER_HUB_REPO }}:latest"
        echo "üåê Image digest: ${{ needs.build-and-push.outputs.image-digest }}"