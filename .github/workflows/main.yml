name: Node.js CI/CD Pipeline with Docker Hub

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: "18"
  IMAGE_NAME: nodejs-demo-app
  DOCKER_REGISTRY: docker.io
  APP_CONTEXT: ./nodejs-demo-app
  PERFORMANCE_THRESHOLD_MS: 500

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "${{ env.APP_CONTEXT }}/package.json"

      - name: Install dependencies
        run: npm install
        working-directory: ${{ env.APP_CONTEXT }}

      - name: Run linter
        run: npm run lint
        working-directory: ${{ env.APP_CONTEXT }}

      - name: Run tests
        run: npm test
        working-directory: ${{ env.APP_CONTEXT }}

      - name: Build application
        run: npm run build
        working-directory: ${{ env.APP_CONTEXT }}

  docker-build:
    name: Build Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (local)
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.APP_CONTEXT }}
          file: ${{ env.APP_CONTEXT }}/Dockerfile
          load: true
          push: false
          tags: ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify Docker image
        run: |
          echo "üîç Verifying Docker image was built..."
          docker images ${{ env.IMAGE_NAME }}:latest
          echo "‚úÖ Docker image verified!"

      - name: Test Docker image locally
        run: |
          echo "üß™ Testing Docker image locally..."
          docker run -d -p 3000:3000 --name test-container ${{ env.IMAGE_NAME }}:latest
          sleep 15

          # Test health endpoint
          echo "Testing health endpoint..."
          curl -f http://localhost:3000/health || exit 1

          # Test main endpoint
          echo "Testing main endpoint..."
          curl -f http://localhost:3000/ || exit 1

          # Test API endpoint
          echo "Testing API endpoint..."
          curl -f http://localhost:3000/api/users || exit 1

          docker stop test-container
          docker rm test-container
          echo "‚úÖ All Docker tests passed!"

      - name: Success Summary
        run: |
          echo "üéâ CI/CD Pipeline completed successfully!"
          echo "‚úÖ Code quality checks passed"
          echo "‚úÖ Unit tests passed"
          echo "‚úÖ Docker build successful"
          echo "‚úÖ Application tested and working"

  docker-publish:
    name: Publish to Docker Hub
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.APP_CONTEXT }}
          file: ${{ env.APP_CONTEXT }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Verify Docker Hub push
        run: |
          echo "üîç Verifying Docker Hub push..."
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          echo "‚úÖ Docker Hub push verified!"

      - name: Test published image
        run: |
          echo "üß™ Testing published Docker image..."
          docker run -d -p 3000:3000 --name hub-test-container ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          sleep 15

          # Test all endpoints
          echo "Testing published image endpoints..."
          curl -f http://localhost:3000/health || exit 1
          curl -f http://localhost:3000/ || exit 1
          curl -f http://localhost:3000/api/users || exit 1

          docker stop hub-test-container
          docker rm hub-test-container
          echo "‚úÖ Published image tests passed!"

      - name: Docker Hub Summary
        run: |
          echo "üê≥ Docker Hub Publishing Summary:"
          echo "üì¶ Repository: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}"
          echo "üè∑Ô∏è Tags: ${{ steps.meta.outputs.tags }}"
          echo "üîó Build SHA: ${{ github.sha }}"
          echo "üåê Platforms: linux/amd64, linux/arm64"
          echo "‚úÖ Image successfully published to Docker Hub!"

  deploy:
    name: Deploy Node.js Application
    needs: docker-publish
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Pull production image from Docker Hub
        run: |
          echo "üì• Pulling production image from Docker Hub..."
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Deploy and test production image
        run: |
          echo "üöÄ Deploying Node.js application from Docker Hub..."
          docker run -d -p 3000:3000 --name production-container ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          sleep 15

          # Test all endpoints
          echo "Testing production deployment..."
          curl -f http://localhost:3000/health || exit 1
          curl -f http://localhost:3000/ || exit 1
          curl -f http://localhost:3000/api/users || exit 1

          echo "‚úÖ Production deployment successful!"
          
          # Show container logs
          echo "üìã Application logs:"
          docker logs production-container
          
          # Cleanup
          docker stop production-container
          docker rm production-container

      - name: Deployment Summary
        run: |
          echo "üéâ Node.js Demo App deployed successfully!"
          echo "üì¶ Docker Hub image: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
          echo "üîó Build SHA: ${{ github.sha }}"
          echo "‚úÖ All endpoints tested and working"
          echo "üöÄ Production image available on Docker Hub!"
          echo "üê≥ Pull command: docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
